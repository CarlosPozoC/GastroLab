{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass apiservice {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7271/api';\n  }\n  obtenerUsuarios() {\n    return this.http.get(`${this.apiUrl}/Usuario`);\n  }\n  crearUsuario(usuario) {\n    return this.http.post(`${this.apiUrl}/Usuario`, usuario);\n  }\n  obtenerRecetas() {\n    return this.http.get(`${this.apiUrl}/Receta`);\n  }\n  obtenerIngredientes() {\n    return this.http.get(`${this.apiUrl}/Ingrediente`);\n  }\n  crearIngrediente(ingrediente) {\n    return this.http.post(`${this.apiUrl}/Ingrediente`, ingrediente);\n  }\n  crearReceta(receta) {\n    const url = `${this.apiUrl}/Receta`; // Reemplaza con la URL correcta de tu API\n    const params = {\n      UsuarioId: receta.usuarioId.toString(),\n      IngredienteId: receta.ingredientes.map(id => id.toString())\n    };\n    const body = {\n      nombre: receta.nombre,\n      descripcion: receta.descripcion,\n      tipo: receta.tipo,\n      url: receta.url\n    };\n    return this.http.post(url, body, {\n      params\n    });\n  }\n}\napiservice.ɵfac = function apiservice_Factory(t) {\n  return new (t || apiservice)(i0.ɵɵinject(i1.HttpClient));\n};\napiservice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: apiservice,\n  factory: apiservice.ɵfac,\n  providedIn: 'root'\n});\nexport { apiservice };","map":{"version":3,"names":["apiservice","constructor","http","apiUrl","obtenerUsuarios","get","crearUsuario","usuario","post","obtenerRecetas","obtenerIngredientes","crearIngrediente","ingrediente","crearReceta","receta","url","params","UsuarioId","usuarioId","toString","IngredienteId","ingredientes","map","id","body","nombre","descripcion","tipo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\cpozo\\OneDrive\\Escritorio\\TFG\\GastroLab\\GastroLab\\src\\app\\apiservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Usuario } from './interfaces/usuario.interface';\nimport { Receta } from './interfaces/receta.interface';\nimport { Ingrediente } from './interfaces/ingrediente.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class apiservice {\n  private apiUrl = 'https://localhost:7271/api';\n\n  constructor(private http: HttpClient) {}\n\n  obtenerUsuarios(): Observable<Usuario[]> {\n    return this.http.get<Usuario[]>(`${this.apiUrl}/Usuario`);\n  }\n\n  crearUsuario(usuario: Usuario): Observable<any> {\n    return this.http.post(`${this.apiUrl}/Usuario`, usuario);\n  }\n\n  obtenerRecetas(): Observable<Receta[]> {\n    return this.http.get<Receta[]>(`${this.apiUrl}/Receta`);\n  }\n\n  obtenerIngredientes(): Observable<Ingrediente[]> {\n    return this.http.get<Ingrediente[]>(`${this.apiUrl}/Ingrediente`);\n  }\n\n  crearIngrediente(ingrediente: Ingrediente): Observable<any> {\n    return this.http.post(`${this.apiUrl}/Ingrediente`, ingrediente);\n  }\n\n  crearReceta(receta: Receta): Observable<any> {\n    const url = `${this.apiUrl}/Receta`; // Reemplaza con la URL correcta de tu API\n\n    const params = {\n      UsuarioId: receta.usuarioId.toString(),\n      IngredienteId: receta.ingredientes.map(id => id.toString()),\n    };\n\n    const body = {\n      nombre: receta.nombre,\n      descripcion: receta.descripcion,\n      tipo: receta.tipo,\n      url: receta.url\n    };\n\n    return this.http.post(url, body, { params });\n  }\n\n\n}\n"],"mappings":";;AAOA,MAGaA,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,4BAA4B;EAEN;EAEvCC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC;EAC3D;EAEAG,YAAYA,CAACC,OAAgB;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,UAAU,EAAEI,OAAO,CAAC;EAC1D;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,MAAM,SAAS,CAAC;EACzD;EAEAO,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,cAAc,CAAC;EACnE;EAEAQ,gBAAgBA,CAACC,WAAwB;IACvC,OAAO,IAAI,CAACV,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,cAAc,EAAES,WAAW,CAAC;EAClE;EAEAC,WAAWA,CAACC,MAAc;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACZ,MAAM,SAAS,CAAC,CAAC;IAErC,MAAMa,MAAM,GAAG;MACbC,SAAS,EAAEH,MAAM,CAACI,SAAS,CAACC,QAAQ,EAAE;MACtCC,aAAa,EAAEN,MAAM,CAACO,YAAY,CAACC,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACJ,QAAQ,EAAE;KAC3D;IAED,MAAMK,IAAI,GAAG;MACXC,MAAM,EAAEX,MAAM,CAACW,MAAM;MACrBC,WAAW,EAAEZ,MAAM,CAACY,WAAW;MAC/BC,IAAI,EAAEb,MAAM,CAACa,IAAI;MACjBZ,GAAG,EAAED,MAAM,CAACC;KACb;IAED,OAAO,IAAI,CAACb,IAAI,CAACM,IAAI,CAACO,GAAG,EAAES,IAAI,EAAE;MAAER;IAAM,CAAE,CAAC;EAC9C;;AAzCWhB,UAAU,C;mBAAVA,UAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAV/B,UAAU,C;SAAVA,UAAU;EAAAgC,OAAA,EAAVhC,UAAU,CAAAiC,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEPlC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}