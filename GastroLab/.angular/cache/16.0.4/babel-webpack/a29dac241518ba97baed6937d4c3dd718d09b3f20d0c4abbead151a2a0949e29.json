{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/cpozo/OneDrive/Escritorio/TFG/GastroLab/GastroLab/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { compareSync } from 'bcryptjs';\nlet LoginComponent = class LoginComponent {\n  constructor(apiservice, router) {\n    this.apiservice = apiservice;\n    this.router = router;\n  }\n  loginUsuario(form) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (form.invalid) {\n        return;\n      }\n      const nombre = form.value.nombre;\n      const contraseña = form.value.contrasena;\n      try {\n        const usuarios = yield _this.apiService.obtenerUsuarios().toPromise();\n        const usuario = usuarios.find(u => u.nombre === nombre);\n        if (usuario) {\n          const contraseñaEncriptada = usuario.contrasena;\n          if (compareSync(contraseña, contraseñaEncriptada)) {\n            // Contraseña correcta, almacenar información del usuario logeado\n            _this.storeLoggedInUser(usuario);\n            // Redirigir al componente TestpageComponent\n            _this.router.navigate(['/test-page']);\n          } else {\n            // Contraseña incorrecta\n            console.log('Contraseña incorrecta');\n          }\n        } else {\n          // No se encontró ningún usuario con ese nombre\n          console.log('Usuario no encontrado');\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }\n  storeLoggedInUser(user) {\n    // Almacena la información del usuario logeado en el localStorage\n    localStorage.setItem('loggedInUser', JSON.stringify(user));\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","compareSync","LoginComponent","constructor","apiservice","router","loginUsuario","form","_this","_asyncToGenerator","invalid","nombre","value","contraseña","contrasena","usuarios","apiService","obtenerUsuarios","toPromise","usuario","find","u","contraseñaEncriptada","storeLoggedInUser","navigate","console","log","error","user","localStorage","setItem","JSON","stringify","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\cpozo\\OneDrive\\Escritorio\\TFG\\GastroLab\\GastroLab\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { apiservice } from '../api.service';\nimport { compareSync } from 'bcryptjs';\nimport { Router } from '@angular/router';\n\ninterface Usuario {\n  id: number;\n  nombre: string;\n  contrasena: string;\n  sexo: string;\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  constructor(private apiservice: apiservice, private router: Router) {}\n\n  async loginUsuario(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n\n    const nombre = form.value.nombre;\n    const contraseña = form.value.contrasena;\n\n    try {\n      const usuarios: Usuario[] = await this.apiService.obtenerUsuarios().toPromise();\n      const usuario = usuarios.find(u => u.nombre === nombre);\n\n      if (usuario) {\n        const contraseñaEncriptada: string = usuario.contrasena;\n\n        if (compareSync(contraseña, contraseñaEncriptada)) {\n          // Contraseña correcta, almacenar información del usuario logeado\n          this.storeLoggedInUser(usuario);\n\n          // Redirigir al componente TestpageComponent\n          this.router.navigate(['/test-page']);\n        } else {\n          // Contraseña incorrecta\n          console.log('Contraseña incorrecta');\n        }\n      } else {\n        // No se encontró ningún usuario con ese nombre\n        console.log('Usuario no encontrado');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  private storeLoggedInUser(user: Usuario): void {\n    // Almacena la información del usuario logeado en el localStorage\n    localStorage.setItem('loggedInUser', JSON.stringify(user));\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,WAAW,QAAQ,UAAU;AAetC,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EACzBC,YAAoBC,UAAsB,EAAUC,MAAc;IAA9C,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAE/DC,YAAYA,CAACC,IAAY;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC7B,IAAIF,IAAI,CAACG,OAAO,EAAE;QAChB;;MAGF,MAAMC,MAAM,GAAGJ,IAAI,CAACK,KAAK,CAACD,MAAM;MAChC,MAAME,UAAU,GAAGN,IAAI,CAACK,KAAK,CAACE,UAAU;MAExC,IAAI;QACF,MAAMC,QAAQ,SAAoBP,KAAI,CAACQ,UAAU,CAACC,eAAe,EAAE,CAACC,SAAS,EAAE;QAC/E,MAAMC,OAAO,GAAGJ,QAAQ,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACV,MAAM,KAAKA,MAAM,CAAC;QAEvD,IAAIQ,OAAO,EAAE;UACX,MAAMG,oBAAoB,GAAWH,OAAO,CAACL,UAAU;UAEvD,IAAIb,WAAW,CAACY,UAAU,EAAES,oBAAoB,CAAC,EAAE;YACjD;YACAd,KAAI,CAACe,iBAAiB,CAACJ,OAAO,CAAC;YAE/B;YACAX,KAAI,CAACH,MAAM,CAACmB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;WACrC,MAAM;YACL;YACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;SAEvC,MAAM;UACL;UACAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;OAEvC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;;IACnB;EACH;EAEQJ,iBAAiBA,CAACK,IAAa;IACrC;IACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EAC5D;CACD;AAzCY1B,cAAc,GAAA+B,UAAA,EAL1BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWlC,cAAc,CAyC1B;SAzCYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}